[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "intellicrack"
version = "0.1.0"
authors = [
  { name="Zachary Flint", email="zacharyflintbbaltd@gmail.com" },
]
description = "Intellicrack: Advanced Binary Analysis and Security Research Framework"
readme = "README.md"
license = { text = "GPL-3.0-or-later" }
requires-python = ">=3.8"
keywords = ["binary-analysis", "reverse-engineering", "security", "vulnerability-detection", "malware-analysis"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Information Technology",
    "Topic :: Security",
    "Topic :: Software Development :: Disassemblers",
    "Topic :: Software Development :: Debuggers",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Environment :: X11 Applications :: Qt",
]

# Core dependencies - same as requirements.txt
dependencies = [
    # Core GUI Framework
    "PyQt5>=5.15",
    
    # Machine Learning and Data Science
    "scikit-learn>=1.6.0",
    "numpy>=1.23.0",
    "joblib>=1.5.0",
    "scipy>=1.15.0",
    
    # Binary Analysis and Reverse Engineering
    "r2pipe>=1.9.0",
    "capstone>=5.0.0",
    "pefile>=2024.8.0",
    "lief>=0.16.0",
    "pyelftools>=0.29",
    
    # Network Analysis
    "pyshark>=0.6",
    "scapy>=2.6.0",
    "requests>=2.31.0",
    "cryptography>=41.0.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    
    # Visualization and Reporting
    "matplotlib>=3.10.0",
    "reportlab>=4.0.0",
    "networkx>=3.1",
    
    # System and Process Management
    "psutil>=5.9.0",
    
    # XML/HTML Processing
    "lxml>=5.4.0",
    "beautifulsoup4>=4.12.0",
    
    # Utilities
    "termcolor>=3.1.0",
    "packaging>=25.0",
    "python-dateutil>=2.9.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    "colorama>=0.4.6",
    
    # File Processing
    "filebytes>=0.10.0",
    "python-magic>=0.4.27",
    
    # Configuration
    "pyyaml>=6.0",
    "toml>=0.10.2",
]

[project.optional-dependencies]
full = [
    "angr>=9.0.0",
    "manticore>=0.3.0",
    "unicorn>=2.1.0",
    "keystone-engine>=0.9.0",
    "ropper>=1.13.0",
    "pwntools>=4.0.0",
    "frida-tools>=12.0.0",
    "yara-python>=4.3.0",
]

ml = [
    "pandas>=2.0.0",
    "torch>=2.0.0",
    "transformers>=4.30.0",
]

network = [
    "mitmproxy>=10.0.0",
    "dpkt>=1.9.0",
]

dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "pre-commit>=3.3.0",
]

[project.urls]
"Homepage" = "https://github.com/zacharyflint/intellicrack"
"Bug Tracker" = "https://github.com/zacharyflint/intellicrack/issues"
"Documentation" = "https://intellicrack.readthedocs.io"
"Source Code" = "https://github.com/zacharyflint/intellicrack"

[project.scripts]
intellicrack = "intellicrack.main:main"
intellicrack-cli = "scripts.run_analysis_cli:main"

[project.gui-scripts]
intellicrack-gui = "intellicrack.ui.main_app:launch"

# Tool configurations
[tool.setuptools]
packages = [
    "intellicrack",
    "intellicrack.ai",
    "intellicrack.core",
    "intellicrack.core.analysis",
    "intellicrack.core.anti_analysis",
    "intellicrack.core.c2",
    "intellicrack.core.exploitation",
    "intellicrack.core.frida_bypass_wizard",
    "intellicrack.core.licensing",
    "intellicrack.core.mitigation_bypass",
    "intellicrack.core.network",
    "intellicrack.core.patching",
    "intellicrack.core.processing",
    "intellicrack.core.protection_bypass",
    "intellicrack.core.reporting",
    "intellicrack.core.vulnerability_research",
    "intellicrack.hexview",
    "intellicrack.models",
    "intellicrack.plugins",
    "intellicrack.plugins.custom_modules",
    "intellicrack.ui",
    "intellicrack.ui.dialogs",
    "intellicrack.ui.widgets",
    "intellicrack.utils",
    "intellicrack.utils.analysis",
    "intellicrack.utils.binary",
    "intellicrack.utils.core",
    "intellicrack.utils.exploitation",
    "intellicrack.utils.patching",
    "intellicrack.utils.protection",
    "intellicrack.utils.reporting",
    "intellicrack.utils.runtime",
    "intellicrack.utils.system",
    "intellicrack.utils.templates",
    "intellicrack.utils.tools",
    "intellicrack.utils.ui",
]
include-package-data = true

[tool.setuptools.package-data]
intellicrack = [
    "assets/*",
    "data/signatures/*",
    "data/templates/*",
    "plugins/custom_modules/*.py",
    "models/*.pkl",
    "models/*.joblib",
    "config/*.json",
]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=intellicrack",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["intellicrack"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | ghidra
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0912",  # Too many branches
    "R0913",  # Too many arguments
    "R0914",  # Too many local variables
    "R0915",  # Too many statements
    "W0511",  # TODO comments
]

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C90", # mccabe
    "N",   # pep8-naming
    "B",   # flake8-bugbear
    "S",   # flake8-bandit
]
ignore = [
    "E501",  # Line too long
    "B008",  # Do not perform function calls in argument defaults
    "S101",  # Use of assert detected
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]