            action_btn.setIcon(QIcon.fromTheme(icon))
            action_btn.setMinimumWidth(120)
            action_btn.clicked.connect(callback)
            actions_layout.addWidget(action_btn)
        
        actions_group.setLayout(actions_layout)
        scroll_layout.addWidget(actions_group)
        
        # --- MAIN DASHBOARD CONTENT ---
        # Create two columns with a splitter
        dashboard_splitter = QSplitter(Qt.Horizontal)
        
        # Left column widgets
        left_column = QWidget()
        left_layout = QVBoxLayout(left_column)
        
        # Recent files section
        recent_files_group = QGroupBox("Recent Files")
        recent_files_layout = QVBoxLayout()
        
        self.recent_files_list = QListWidget()
        self.recent_files_list.setMaximumHeight(150)
        self.recent_files_list.itemDoubleClicked.connect(self.load_recent_file)
        
        # Add sample recent files
        for i in range(5):
            item = QListWidgetItem(f"Sample{i+1}.exe - Last opened: {5-i}h ago")
            self.recent_files_list.addItem(item)
        
        recent_files_layout.addWidget(self.recent_files_list)
        
        recent_files_buttons = QHBoxLayout()
        open_file_btn = QPushButton("Open File")
        open_file_btn.clicked.connect(self.select_binary)
        clear_recent_btn = QPushButton("Clear List")
        
        recent_files_buttons.addWidget(open_file_btn)
        recent_files_buttons.addWidget(clear_recent_btn)
        
        recent_files_layout.addLayout(recent_files_buttons)
        recent_files_group.setLayout(recent_files_layout)
        left_layout.addWidget(recent_files_group)
        
        # Binary information section (shown when binary is loaded)
        self.binary_info_group = QGroupBox("Current Binary Information")
        binary_info_layout = QGridLayout()
        
        # Sample binary info (in a real implementation, this would be populated based on loaded binary)
        binary_info = [
            ("Name:", "Sample.exe"),
            ("Size:", "3.4 MB"),
            ("Type:", "PE32+ executable (console) x86-64"),
            ("Entropy:", "7.2 (likely packed/encrypted)"),
            ("MD5:", "d41d8cd98f00b204e9800998ecf8427e")
        ]
        
        for row, (label_text, value_text) in enumerate(binary_info):
            label = QLabel(f"<b>{label_text}</b>")
            value = QLabel(value_text)
            binary_info_layout.addWidget(label, row, 0)
            binary_info_layout.addWidget(value, row, 1)
        
        self.binary_info_group.setLayout(binary_info_layout)
        left_layout.addWidget(self.binary_info_group)
        
        # Notifications section
        notifications_group = QGroupBox("Notifications")
        notifications_layout = QVBoxLayout()
        
        self.notifications_list = QListWidget()
        
        # Add sample notifications
        notifications = [
            ("New plugin update available", "License Finder v1.3.0 has been released"),
            ("Analysis completed", "Analysis of Sample2.exe completed with 3 findings"),
            ("System update", "Intellicrack core has been updated to v2.0.1")
        ]
        
        for title, message in notifications:
            item = QListWidgetItem(f"<b>{title}</b><br>{message}")
            self.notifications_list.addItem(item)
        
        notifications_layout.addWidget(self.notifications_list)
        
        clear_notifications_btn = QPushButton("Clear All")
        notifications_layout.addWidget(clear_notifications_btn)
        
        notifications_group.setLayout(notifications_layout)
        left_layout.addWidget(notifications_group)
        
        # Right column widgets
        right_column = QWidget()
        right_layout = QVBoxLayout(right_column)
        
        # Statistics section
        stats_group = QGroupBox("Analysis Statistics")
        stats_layout = QGridLayout()
        
        # Sample statistics (in a real implementation, these would be actual statistics)
        stats = [
            ("Total Binaries Analyzed:", "42"),
            ("Successful Patches:", "37"),
            ("Protection Schemes Identified:", "15"),
            ("License Types Bypassed:", "8"),
            ("Most Used Tool:", "Hex Viewer (152 times)")
        ]
        
        for row, (label_text, value_text) in enumerate(stats):
            label = QLabel(f"<b>{label_text}</b>")
            value = QLabel(value_text)
            stats_layout.addWidget(label, row, 0)
            stats_layout.addWidget(value, row, 1)
        
        stats_group.setLayout(stats_layout)
        right_layout.addWidget(stats_group)
        
        # License server status section
        server_group = QGroupBox("License Server Status")
        server_layout = QVBoxLayout()
        
        server_status = QLabel("<b>Status:</b> <span style='color:green;'>Running</span>")
        server_address = QLabel("<b>Address:</b> 0.0.0.0:27000")
        server_active = QLabel("<b>Active Connections:</b> 2")
        server_features = QLabel("<b>Available Features:</b> FEATURE1, FEATURE2, SUITE")
        
        server_layout.addWidget(server_status)
        server_layout.addWidget(server_address)
        server_layout.addWidget(server_active)
        server_layout.addWidget(server_features)
        
        server_buttons = QHBoxLayout()
        start_server_btn = QPushButton("Start Server")
        start_server_btn.setEnabled(False)
        stop_server_btn = QPushButton("Stop Server")
        configure_server_btn = QPushButton("Configure")
        
        server_buttons.addWidget(start_server_btn)
        server_buttons.addWidget(stop_server_btn)
        server_buttons.addWidget(configure_server_btn)
        
        server_layout.addLayout(server_buttons)
        server_group.setLayout(server_layout)
        right_layout.addWidget(server_group)
        
        # Activity log section
        activity_group = QGroupBox("Recent Activity")
        activity_layout = QVBoxLayout()
        
        self.activity_log = QTextEdit()
        self.activity_log.setReadOnly(True)
        
        # Sample activity log entries
        activity_entries = [
            ("12:30:45", "Application started"),
            ("12:31:02", "Loaded binary: Sample1.exe"),
            ("12:32:15", "Analysis completed with 3 findings"),
            ("12:35:30", "Patch applied successfully"),
            ("12:40:12", "Network capture started")
        ]
        
        for timestamp, activity in activity_entries:
            self.activity_log.append(f"<b>[{timestamp}]</b> {activity}")
        
        activity_layout.addWidget(self.activity_log)
        activity_group.setLayout(activity_layout)
        right_layout.addWidget(activity_group)
        
        # Add columns to splitter
        dashboard_splitter.addWidget(left_column)
        dashboard_splitter.addWidget(right_column)
        dashboard_splitter.setSizes([400, 400])
        
        scroll_layout.addWidget(dashboard_splitter)
        
        # Set the scroll widget and add to main layout
        scroll_area.setWidget(scroll_widget)
        dashboard_layout.addWidget(scroll_area)
        
        # Set the layout for the tab
        self.dashboard_tab.setLayout(dashboard_layout)
        
    def open_analyze_tab(self):
        """Switch to the Analysis tab."""
        self.tabs.setCurrentWidget(self.analysis_tab)
        
    def open_patching_tab(self):
        """Switch to the Patching & Exploitation tab."""
        self.tabs.setCurrentWidget(self.patching_exploitation_tab)
        
    def open_hex_viewer_tab(self):
        """Switch to the Tools & Plugins tab."""
        self.tabs.setCurrentWidget(self.tools_plugins_tab)
        
    def open_network_tab(self):
        """Switch to the NetAnalysis & Emulation tab."""
        self.tabs.setCurrentWidget(self.netanalysis_emulation_tab)
        
    def open_plugins_tab(self):
        """Switch to the Tools & Plugins tab."""
        self.tabs.setCurrentWidget(self.tools_plugins_tab)
        
    def apply_theme_settings(self):
        """Apply theme settings from configuration."""
        try:
            # Get theme from config or default to dark theme
            theme = CONFIG.get("theme", "dark")
            
            if theme == "dark":
                # Apply dark theme
                dark_palette = QPalette()
                dark_palette.setColor(QPalette.Window, QColor(53, 53, 53))
                dark_palette.setColor(QPalette.WindowText, Qt.white)
                dark_palette.setColor(QPalette.Base, QColor(25, 25, 25))
                dark_palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
                dark_palette.setColor(QPalette.ToolTipBase, Qt.white)
                dark_palette.setColor(QPalette.ToolTipText, Qt.white)
                dark_palette.setColor(QPalette.Text, Qt.white)
                dark_palette.setColor(QPalette.Button, QColor(53, 53, 53))
                dark_palette.setColor(QPalette.ButtonText, Qt.white)
                dark_palette.setColor(QPalette.BrightText, Qt.red)
                dark_palette.setColor(QPalette.Link, QColor(42, 130, 218))
                dark_palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
                dark_palette.setColor(QPalette.HighlightedText, Qt.black)
                self.setPalette(dark_palette)
                
                # Set stylesheet for additional widgets
                self.setStyleSheet("""
                QToolTip { 
                    color: white; 
                    background-color: #2a82da; 
                    border: 1px solid white; 
                }
                QGroupBox {
                    border: 1px solid gray;
                    border-radius: 5px;
                    margin-top: 1ex;
                    font-weight: bold;
                }
                QGroupBox::title {
                    subcontrol-origin: margin;
                    subcontrol-position: top center;
                    padding: 0 3px;
                }
                """)
                
            elif theme == "light":
                # Reset to default light theme
                self.setPalette(QApplication.style().standardPalette())
                self.setStyleSheet("")
                
            # Apply font settings
            font_size = CONFIG.get("font_size", 10)
            font = self.font()
            font.setPointSize(font_size)
            self.setFont(font)
            
            self.logger.info(f"Applied theme settings: {theme} theme with {font_size}pt font")
            
        except Exception as e:
            self.logger.error(f"Error applying theme settings: {e}")
            # Fall back to default theme
            self.setPalette(QApplication.style().standardPalette())
            
    def _create_placeholder_image(self, title="Missing Image"):
        """Create a placeholder image when an image is missing."""
        try:
            from PIL import Image, ImageDraw, ImageFont
            
            # Create a new image with a gray background
            img = Image.new('RGB', (400, 200), color=(200, 200, 200))
            draw = ImageDraw.Draw(img)
            
            # Add text to the image
            try:
                font = ImageFont.truetype("arial.ttf", 20)
            except:
                font = ImageFont.load_default()
                
            # Draw the placeholder text
            draw.text((20, 80), f"Placeholder: {title}", fill=(0, 0, 0), font=font)
            
            # Convert to bytes
            import io
            img_byte_array = io.BytesIO()
            img.save(img_byte_array, format='PNG')
            return img_byte_array.getvalue()
            
        except Exception as e:
            self.logger.error(f"Error creating placeholder image: {e}")
            # Return a minimal valid PNG if PIL fails
            return bytes.fromhex(
                '89504e470d0a1a0a0000000d49484452000000100000001008060000001ff3ff61'
                '000000017352474200aece1ce90000000467414d410000b18f0bfc61050000000a'
                '49444154384f631800000500010155270ae10000000049454e44ae426082'
            )
            
    def _create_icon_pixmap(self, size=64):
        """Create a blank pixmap for icons when the actual icon is missing."""
        pixmap = QPixmap(size, size)
        pixmap.fill(Qt.transparent)
        
        painter = QPainter(pixmap)
        painter.setPen(QPen(Qt.gray, 2))
        painter.drawRect(2, 2, size-4, size-4)
        painter.setPen(QPen(Qt.gray, 1))
        painter.drawLine(2, 2, size-2, size-2)
        painter.drawLine(2, size-2, size-2, 2)
        painter.end()
        
        return pixmap
        
    def create_new_plugin(self, plugin_type):
        """Create a new plugin of the specified type."""
        self.logger.info(f"Creating new plugin of type: {plugin_type}")
        
        # Create a default plugin based on type
        plugin_name = f"New {plugin_type} Plugin"
        plugin_code = ""
        
        if plugin_type == "Frida":
            plugin_code = """// Frida script template
Java.perform(function() {
    // Find and hook target class/method
    var targetClass = Java.use("com.example.TargetClass");
    
    // Original method
    var originalMethod = targetClass.checkLicense.implementation;
    
    // Replace implementation
    targetClass.checkLicense.implementation = function() {
        console.log("[+] License check bypassed");
        return true;  // Always return true
    };
});"""
        elif plugin_type == "Ghidra":
            plugin_code = """//Ghidra script template
//@category    Analysis
//@author      User
//@description Custom Intellicrack plugin

import ghidra.app.script.GhidraScript;
import ghidra.program.model.symbol.*;
import ghidra.program.model.listing.*;
import ghidra.program.model.address.*;

public class LicensePatternScanner extends GhidraScript {
    @Override
    public void run() throws Exception {
        println("Starting license pattern scanner...");
        
        // Your code here
        
        println("Scan complete");
    }
}"""
        elif plugin_type == "Python":
            plugin_code = """# Python plugin template
class CustomPlugin:
    def __init__(self):
        self.name = "Custom Plugin"
        self.description = "Add your description here"
        
    def analyze(self, binary_path):
        # Analyze the binary and return results
        results = []
        results.append(f"Analyzing {binary_path}")
        # Add your analysis code here
        
        return results
        
    def patch(self, binary_path, locations):
        # Apply patches to the binary
        print(f"Patching {binary_path} at {len(locations)} locations")
        # Add your patching code here
        
        return True"""
        
        # Open a dialog for plugin creation (simplified implementation)
        QMessageBox.information(
            self, 
            "Plugin Created", 
            f"A new {plugin_type} plugin template has been created.\n\nYou can now edit it in the Plugins tab."
        )
        
        return {"name": plugin_name, "code": plugin_code, "type": plugin_type}
        
    def setup_settings_tab(self):
        """Sets up the Settings tab with configuration options for the application."""
        # Create main layout with scroll area for the settings
        layout = QVBoxLayout(self.settings_tab)
        
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        
        # General Configuration section
        general_group = QGroupBox("General Configuration")
        general_layout = QVBoxLayout(general_group)
        
        ghidra_path_layout = QHBoxLayout()
        ghidra_path_layout.addWidget(QLabel("Ghidra Path:"))
        self.ghidra_path_edit = QLineEdit()
        if "ghidra_path" in CONFIG:
            self.ghidra_path_edit.setText(CONFIG["ghidra_path"])
        ghidra_path_browse_btn = QPushButton("Browse...")
        ghidra_path_browse_btn.clicked.connect(self.browse_ghidra_path)
        ghidra_path_layout.addWidget(self.ghidra_path_edit)
        ghidra_path_layout.addWidget(ghidra_path_browse_btn)
        
        log_dir_layout = QHBoxLayout()
        log_dir_layout.addWidget(QLabel("Log Directory Path:"))
        log_dir_edit = QLineEdit()
        if "log_dir" in CONFIG:
            log_dir_edit.setText(CONFIG["log_dir"])
        log_dir_layout.addWidget(log_dir_edit)
        
        plugin_dir_layout = QHBoxLayout()
        plugin_dir_layout.addWidget(QLabel("Default Plugin Directory Path:"))
        plugin_dir_edit = QLineEdit()
        if "plugin_directory" in CONFIG:
            plugin_dir_edit.setText(CONFIG["plugin_directory"])
        plugin_dir_layout.addWidget(plugin_dir_edit)
        
        runtime_interception_cb = QCheckBox("Enable Runtime Interception (Frida) by default")
        if "runtime_interception" in CONFIG:
            runtime_interception_cb.setChecked(CONFIG["runtime_interception"])
        
        detect_protections_cb = QCheckBox("Detect Protections Automatically on Binary Load")
        if "detect_protections" in CONFIG:
            detect_protections_cb.setChecked(CONFIG["detect_protections"])
        
        enable_sandbox_cb = QCheckBox("Enable Plugin Sandboxing")
        if "enable_plugin_sandbox" in CONFIG:
            enable_sandbox_cb.setChecked(CONFIG["enable_plugin_sandbox"])
        
        # Remote Plugin Execution section
        remote_plugins_group = QGroupBox("Remote Plugin Execution")
        remote_plugins_layout = QVBoxLayout(remote_plugins_group)
        
        enable_remote_plugins_cb = QCheckBox("Enable Remote Plugins")
        if "enable_remote_plugins" in CONFIG:
            enable_remote_plugins_cb.setChecked(CONFIG["enable_remote_plugins"])
        
        remote_host_layout = QHBoxLayout()
        remote_host_layout.addWidget(QLabel("Default Remote Host:"))
        remote_host_edit = QLineEdit()
        if "remote_host" in CONFIG:
            remote_host_edit.setText(CONFIG["remote_host"])
        remote_host_layout.addWidget(remote_host_edit)
        
        remote_port_layout = QHBoxLayout()
        remote_port_layout.addWidget(QLabel("Default Remote Port:"))
        remote_port_spin = QSpinBox()
        remote_port_spin.setRange(1, 65535)
        if "remote_port" in CONFIG:
            remote_port_spin.setValue(CONFIG["remote_port"])
        else:
            remote_port_spin.setValue(8000)  # Default value
        remote_port_layout.addWidget(remote_port_spin)
        
        remote_plugins_layout.addWidget(enable_remote_plugins_cb)
        remote_plugins_layout.addLayout(remote_host_layout)
        remote_plugins_layout.addLayout(remote_port_layout)
        
        plugin_timeout_layout = QHBoxLayout()
        plugin_timeout_layout.addWidget(QLabel("Plugin Execution Timeout (seconds):"))
        self.plugin_timeout_spinbox = QSpinBox()
        self.plugin_timeout_spinbox.setRange(1, 3600)
        if "plugin_timeout" in CONFIG:
            self.plugin_timeout_spinbox.setValue(CONFIG["plugin_timeout"])
        else:
            self.plugin_timeout_spinbox.setValue(60)  # Default value
        plugin_timeout_layout.addWidget(self.plugin_timeout_spinbox)
        
        save_general_btn = QPushButton("Save General Configuration")
        save_general_btn.clicked.connect(self.save_config)
        
        general_layout.addLayout(ghidra_path_layout)
        general_layout.addLayout(log_dir_layout)
        general_layout.addLayout(plugin_dir_layout)
        general_layout.addWidget(runtime_interception_cb)
        general_layout.addWidget(detect_protections_cb)
        general_layout.addWidget(enable_sandbox_cb)
        general_layout.addWidget(remote_plugins_group)
        general_layout.addLayout(plugin_timeout_layout)
        general_layout.addWidget(save_general_btn)
        
        # Appearance section
        appearance_group = QGroupBox("Appearance")
        appearance_layout = QVBoxLayout(appearance_group)
        
        theme_layout = QHBoxLayout()
        theme_layout.addWidget(QLabel("UI Theme:"))
        theme_combo = QComboBox()
        theme_combo.addItems(["Light", "Dark"])
        if "ui_theme" in CONFIG:
            theme_combo.setCurrentText(CONFIG["ui_theme"])
        theme_combo.currentTextChanged.connect(self.apply_theme)
        theme_layout.addWidget(theme_combo)
        
        ui_scale_layout = QHBoxLayout()
        ui_scale_layout.addWidget(QLabel("UI Scale:"))
        self.ui_scale_slider = QSlider(Qt.Horizontal)
        self.ui_scale_slider.setRange(50, 200)
        self.ui_scale_slider.setSingleStep(10)
        if "ui_scale" in CONFIG:
            self.ui_scale_slider.setValue(CONFIG["ui_scale"])
        else:
            self.ui_scale_slider.setValue(100)  # Default value
        self.scale_value_label = QLabel(f"{self.ui_scale_slider.value()}%")
        self.ui_scale_slider.valueChanged.connect(lambda value: self.scale_value_label.setText(f"{value}%"))
        ui_scale_layout.addWidget(self.ui_scale_slider)
        ui_scale_layout.addWidget(self.scale_value_label)
        
        font_size_layout = QHBoxLayout()
        font_size_layout.addWidget(QLabel("Font Size:"))
        self.font_size_combo = QComboBox()
        self.font_size_combo.addItems(["Small", "Medium", "Large"])
        if "font_size" in CONFIG:
            self.font_size_combo.setCurrentText(CONFIG["font_size"])
        else:
            self.font_size_combo.setCurrentText("Medium")  # Default value
        font_size_layout.addWidget(self.font_size_combo)
        
        apply_appearance_btn = QPushButton("Apply Appearance Settings")
        apply_appearance_btn.clicked.connect(self.apply_appearance_settings)
        
        appearance_layout.addLayout(theme_layout)
        appearance_layout.addLayout(ui_scale_layout)
        appearance_layout.addLayout(font_size_layout)
        appearance_layout.addWidget(apply_appearance_btn)
        
        # Performance Optimization section
        performance_group = QGroupBox("Performance Optimization")
        performance_layout = QVBoxLayout(performance_group)
        
        self.memory_opt_enable_cb = QCheckBox("Enable Memory Optimization")
        if "memory_optimization_enabled" in CONFIG:
            self.memory_opt_enable_cb.setChecked(CONFIG["memory_optimization_enabled"])
        
        memory_threshold_layout = QHBoxLayout()
        memory_threshold_layout.addWidget(QLabel("Memory Threshold (%):"))
        self.memory_threshold_spinbox = QSpinBox()
        self.memory_threshold_spinbox.setRange(10, 90)
        if "memory_threshold" in CONFIG:
            self.memory_threshold_spinbox.setValue(CONFIG["memory_threshold"])
        else:
            self.memory_threshold_spinbox.setValue(75)  # Default value
        memory_threshold_layout.addWidget(self.memory_threshold_spinbox)
        
        memory_interval_layout = QHBoxLayout()
        memory_interval_layout.addWidget(QLabel("Memory Check Interval (seconds):"))
        self.memory_interval_spinbox = QSpinBox()
        self.memory_interval_spinbox.setRange(1, 3600)
        if "memory_check_interval" in CONFIG:
            self.memory_interval_spinbox.setValue(CONFIG["memory_check_interval"])
        else:
            self.memory_interval_spinbox.setValue(60)  # Default value
        memory_interval_layout.addWidget(self.memory_interval_spinbox)
        
        # Specific Optimization Techniques section
        optimization_group = QGroupBox("Specific Optimization Techniques")
        optimization_layout = QVBoxLayout(optimization_group)
        
        self.gc_enable_cb = QCheckBox("Aggressive Garbage Collection")
        if "memory_opt_gc" in CONFIG:
            self.gc_enable_cb.setChecked(CONFIG["memory_opt_gc"])
        
        self.mem_struct_enable_cb = QCheckBox("Use Memory-Efficient Data Structures")
        if "memory_opt_structures" in CONFIG:
            self.mem_struct_enable_cb.setChecked(CONFIG["memory_opt_structures"])
        
        self.incremental_enable_cb = QCheckBox("Enable Incremental Loading for Analysis")
        if "memory_opt_incremental" in CONFIG:
            self.incremental_enable_cb.setChecked(CONFIG["memory_opt_incremental"])
        
        self.leak_detect_enable_cb = QCheckBox("Enable Memory Leak Detection (Experimental)")
        if "memory_opt_leak_detection" in CONFIG:
            self.leak_detect_enable_cb.setChecked(CONFIG["memory_opt_leak_detection"])
        
        optimization_layout.addWidget(self.gc_enable_cb)
        optimization_layout.addWidget(self.mem_struct_enable_cb)
        optimization_layout.addWidget(self.incremental_enable_cb)
        optimization_layout.addWidget(self.leak_detect_enable_cb)
        
        self.gpu_enable_cb = QCheckBox("Enable GPU Acceleration (Global)")
        if "gpu_acceleration" in CONFIG:
            self.gpu_enable_cb.setChecked(CONFIG["gpu_acceleration"])
        
        gpu_backend_layout = QHBoxLayout()
        gpu_backend_layout.addWidget(QLabel("Preferred GPU Backend:"))
        gpu_backend_combo = QComboBox()
        gpu_backend_combo.addItems(["CUDA", "OpenCL", "PyTorch"])
        if "gpu_backend" in CONFIG:
            gpu_backend_combo.setCurrentText(CONFIG["gpu_backend"])
        gpu_backend_layout.addWidget(gpu_backend_combo)
        
        self.distributed_enable_cb = QCheckBox("Enable Distributed Processing (Global)")
        if "distributed_processing" in CONFIG:
            self.distributed_enable_cb.setChecked(CONFIG["distributed_processing"])
        
        apply_performance_btn = QPushButton("Apply Performance Settings")
        apply_performance_btn.clicked.connect(self.apply_performance_settings)
        
        performance_layout.addWidget(self.memory_opt_enable_cb)
        performance_layout.addLayout(memory_threshold_layout)
        performance_layout.addLayout(memory_interval_layout)
        performance_layout.addWidget(optimization_group)
        performance_layout.addWidget(self.gpu_enable_cb)
        performance_layout.addLayout(gpu_backend_layout)
        performance_layout.addWidget(self.distributed_enable_cb)
        performance_layout.addWidget(apply_performance_btn)
        
        # Dependency Management section
        dependency_group = QGroupBox("Dependency Management")
        dependency_layout = QVBoxLayout(dependency_group)
        
        check_dependencies_btn = QPushButton("Check for Missing/Updateable Dependencies")
        check_dependencies_btn.clicked.connect(lambda: check_and_install_dependencies())
        
        install_dependencies_btn = QPushButton("Install/Update Selected Dependencies")
        install_dependencies_btn.clicked.connect(lambda: install_dependencies())
        
        dependency_layout.addWidget(check_dependencies_btn)
        dependency_layout.addWidget(install_dependencies_btn)
        
        # Configuration Profiles section
        profiles_group = QGroupBox("Configuration Profiles")
        profiles_layout = QVBoxLayout(profiles_group)
        
        load_profile_btn = QPushButton("Load Configuration Profile...")
        save_profile_btn = QPushButton("Save Current Configuration as Profile...")
        
        preset_profile_layout = QHBoxLayout()
        preset_profile_layout.addWidget(QLabel("Apply Preset Profile:"))
        preset_profile_combo = QComboBox()
        preset_profile_combo.addItems(["Default", "Maximum Security", "Performance Optimized", "Deep Analysis", "Basic Analysis"])
        preset_profile_combo.currentTextChanged.connect(self.apply_config_preset)
        preset_profile_layout.addWidget(preset_profile_combo)
        
        profiles_layout.addWidget(load_profile_btn)
        profiles_layout.addWidget(save_profile_btn)
        profiles_layout.addLayout(preset_profile_layout)
        
        # About & Help section
        about_group = QGroupBox("About & Help")
        about_layout = QVBoxLayout(about_group)
        
        about_btn = QPushButton("About Intellicrack")
        about_btn.clicked.connect(self.show_about_dialog)
        
        docs_btn = QPushButton("View Documentation")
        docs_btn.clicked.connect(self.show_documentation)
        
        tutorials_btn = QPushButton("View Tutorials")
        tutorials_btn.clicked.connect(self.show_tutorials)
        
        about_layout.addWidget(about_btn)
        about_layout.addWidget(docs_btn)
        about_layout.addWidget(tutorials_btn)
        
        # Add all sections to the scroll layout
        scroll_layout.addWidget(general_group)
        scroll_layout.addWidget(appearance_group)
        scroll_layout.addWidget(performance_group)
        scroll_layout.addWidget(dependency_group)
        scroll_layout.addWidget(profiles_group)
        scroll_layout.addWidget(about_group)
        
        # Set up the scroll area
        scroll_area.setWidget(scroll_widget)
        layout.addWidget(scroll_area)
        layout = QVBoxLayout()
        
        # Create scrollable area
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        scroll_layout.setContentsMargins(10, 10, 10, 10)
        scroll_layout.setSpacing(10)
        
        # Header section
        header_layout = QHBoxLayout()
        header_layout.addWidget(QLabel("<h2>Settings</h2>"))
        header_layout.addStretch(1)
        
        # Profiles dropdown
        header_layout.addWidget(QLabel("Profile:"))
        profiles_combo = QComboBox()
        profiles_combo.addItems(["Default", "Performance", "Development", "Custom"])
        header_layout.addWidget(profiles_combo)
        
        # Profile buttons
        save_profile_btn = QPushButton("Save")
        save_profile_btn.setToolTip("Save current settings to selected profile")
        header_layout.addWidget(save_profile_btn)
        
        scroll_layout.addLayout(header_layout)
        
        # Create tabbed interface for settings categories
        settings_tabs = QTabWidget()
        
        # 1. AI Configuration tab
        ai_tab = QWidget()
        ai_layout = QVBoxLayout(ai_tab)
        
        # Model selection group
        model_group = QGroupBox("AI Model Selection")
        model_layout = QGridLayout()
        
        model_layout.addWidget(QLabel("Primary Model:"), 0, 0)
        primary_model_combo = QComboBox()
        primary_model_combo.addItems(["Claude-3 Opus", "Claude-3 Sonnet", "GPT-4", "GPT-3.5 Turbo", "Local LLama"])
        model_layout.addWidget(primary_model_combo, 0, 1)
        
        model_layout.addWidget(QLabel("Local Model:"), 1, 0)
        local_model_path = QLineEdit()
        local_model_path.setPlaceholderText("/path/to/model")
        browse_model_btn = QPushButton("Browse")
        
        model_path_layout = QHBoxLayout()
        model_path_layout.addWidget(local_model_path)
        model_path_layout.addWidget(browse_model_btn)
        model_layout.addLayout(model_path_layout, 1, 1)
        
        model_layout.addWidget(QLabel("API Key:"), 2, 0)
        api_key_input = QLineEdit()
        api_key_input.setEchoMode(QLineEdit.Password)
        api_key_input.setPlaceholderText("Enter API key for cloud models")
        model_layout.addWidget(api_key_input, 2, 1)
        
        model_layout.addWidget(QLabel("API Endpoint:"), 3, 0)
        endpoint_input = QLineEdit()
        endpoint_input.setText("https://api.anthropic.com/v1/complete")
        model_layout.addWidget(endpoint_input, 3, 1)
        
        model_group.setLayout(model_layout)
        ai_layout.addWidget(model_group)
        
        # Model parameters group
        params_group = QGroupBox("Model Parameters")
        params_layout = QGridLayout()
        
        params_layout.addWidget(QLabel("Temperature:"), 0, 0)
        temp_slider = QSlider(Qt.Horizontal)
        temp_slider.setRange(0, 100)
        temp_slider.setValue(70)
        temp_value = QLabel("0.7")
        
        temp_layout = QHBoxLayout()
        temp_layout.addWidget(temp_slider)
        temp_layout.addWidget(temp_value)
        params_layout.addLayout(temp_layout, 0, 1)
        
        params_layout.addWidget(QLabel("Max Tokens:"), 1, 0)
        max_tokens_spin = QSpinBox()
        max_tokens_spin.setRange(10, 10000)
        max_tokens_spin.setValue(2000)
        params_layout.addWidget(max_tokens_spin, 1, 1)
        
        params_layout.addWidget(QLabel("Context Window:"), 2, 0)
        context_combo = QComboBox()
        context_combo.addItems(["4K tokens", "8K tokens", "16K tokens", "100K tokens", "Maximum available"])
        params_layout.addWidget(context_combo, 2, 1)
        
        params_layout.addWidget(QLabel("Preset Style:"), 3, 0)
        style_combo = QComboBox()
        style_combo.addItems(["Balanced", "Creative", "Factual", "Technical", "Custom"])
        params_layout.addWidget(style_combo, 3, 1)
        
        params_group.setLayout(params_layout)
        ai_layout.addWidget(params_group)
        
        # Prompt templates group
        templates_group = QGroupBox("Prompt Templates")
        templates_layout = QVBoxLayout()
        
        templates_layout.addWidget(QLabel("Selected Template:"))
        template_combo = QComboBox()
        template_combo.addItems(["Binary Analysis", "License Finding", "Protection Analysis", "Assembly Explanation", "Custom"])
        templates_layout.addWidget(template_combo)
        
        template_edit = QTextEdit()
        template_edit.setPlaceholderText("Edit the selected template here...")
        template_edit.setMinimumHeight(100)
        templates_layout.addWidget(template_edit)
        
        template_buttons = QHBoxLayout()
        save_template_btn = QPushButton("Save Template")
        new_template_btn = QPushButton("New Template")
        delete_template_btn = QPushButton("Delete Template")
        
        template_buttons.addWidget(save_template_btn)
        template_buttons.addWidget(new_template_btn)
        template_buttons.addWidget(delete_template_btn)
        templates_layout.addLayout(template_buttons)
        
        templates_group.setLayout(templates_layout)
        ai_layout.addWidget(templates_group)
        
        # 2. Interface Settings tab
        interface_tab = QWidget()
        interface_layout = QVBoxLayout(interface_tab)
        
        # Theme settings
        theme_group = QGroupBox("Theme Settings")
        theme_layout = QVBoxLayout()
        
        theme_radio_layout = QHBoxLayout()
        light_radio = QRadioButton("Light Theme")
        dark_radio = QRadioButton("Dark Theme")
        custom_radio = QRadioButton("Custom Theme")
        
        # Set default theme
        dark_radio.setChecked(True)
        
        theme_radio_layout.addWidget(light_radio)
        theme_radio_layout.addWidget(dark_radio)
        theme_radio_layout.addWidget(custom_radio)
        theme_layout.addLayout(theme_radio_layout)
        
        # Color scheme customization
        color_layout = QGridLayout()
        
        color_layout.addWidget(QLabel("Primary Color:"), 0, 0)
        primary_color_btn = QPushButton()
        primary_color_btn.setStyleSheet("background-color: #007BFF;")
        primary_color_btn.setMaximumWidth(50)
        color_layout.addWidget(primary_color_btn, 0, 1)
        
        color_layout.addWidget(QLabel("Secondary Color:"), 1, 0)
        secondary_color_btn = QPushButton()
        secondary_color_btn.setStyleSheet("background-color: #6C757D;")
        secondary_color_btn.setMaximumWidth(50)
        color_layout.addWidget(secondary_color_btn, 1, 1)
        
        color_layout.addWidget(QLabel("Background Color:"), 2, 0)
        bg_color_btn = QPushButton()
        bg_color_btn.setStyleSheet("background-color: #121212;")
        bg_color_btn.setMaximumWidth(50)
        color_layout.addWidget(bg_color_btn, 2, 1)
        
        theme_layout.addLayout(color_layout)
        
        # Font settings
        font_layout = QGridLayout()
        
        font_layout.addWidget(QLabel("UI Font:"), 0, 0)
        ui_font_combo = QComboBox()
        ui_font_combo.addItems(["Segoe UI", "Arial", "Roboto", "System Default"])
        font_layout.addWidget(ui_font_combo, 0, 1)
        
        font_layout.addWidget(QLabel("Code Font:"), 1, 0)
        code_font_combo = QComboBox()
        code_font_combo.addItems(["Consolas", "Courier New", "Source Code Pro", "Monospace"])
        font_layout.addWidget(code_font_combo, 1, 1)
        
        font_layout.addWidget(QLabel("Font Size:"), 2, 0)
        font_size_spin = QSpinBox()
        font_size_spin.setRange(8, 24)
        font_size_spin.setValue(10)
        font_layout.addWidget(font_size_spin, 2, 1)
        
        theme_layout.addLayout(font_layout)
        
        theme_group.setLayout(theme_layout)
        interface_layout.addWidget(theme_group)
        
        # Layout settings
        layout_group = QGroupBox("Layout Settings")
        layout_settings = QVBoxLayout()
        
        # Tab position
        tab_position_layout = QHBoxLayout()
        tab_position_layout.addWidget(QLabel("Tab Position:"))
        tab_position_combo = QComboBox()
        tab_position_combo.addItems(["Top", "Bottom", "Left", "Right"])
        tab_position_layout.addWidget(tab_position_combo)
        layout_settings.addLayout(tab_position_layout)
        
        # Other layout options
        show_toolbar_check = QCheckBox("Show Toolbar")
        show_toolbar_check.setChecked(True)
        show_status_check = QCheckBox("Show Status Bar")
        show_status_check.setChecked(True)
        restore_session_check = QCheckBox("Restore Last Session on Startup")
        restore_session_check.setChecked(True)
        
        layout_settings.addWidget(show_toolbar_check)
        layout_settings.addWidget(show_status_check)
        layout_settings.addWidget(restore_session_check)
        
        layout_group.setLayout(layout_settings)
        interface_layout.addWidget(layout_group)
        
        # 3. Performance tab
        performance_tab = QWidget()
        performance_layout = QVBoxLayout(performance_tab)
        
        # Memory settings
        memory_group = QGroupBox("Memory Settings")
        memory_layout = QGridLayout()
        
        memory_layout.addWidget(QLabel("Maximum Memory Usage:"), 0, 0)
        memory_slider = QSlider(Qt.Horizontal)
        memory_slider.setRange(512, 8192)
        memory_slider.setValue(2048)
        memory_value = QLabel("2048 MB")
        
        memory_slider_layout = QHBoxLayout()
        memory_slider_layout.addWidget(memory_slider)
        memory_slider_layout.addWidget(memory_value)
        memory_layout.addLayout(memory_slider_layout, 0, 1)
        
        memory_layout.addWidget(QLabel("Cache Size:"), 1, 0)
        cache_combo = QComboBox()
        cache_combo.addItems(["Small (256MB)", "Medium (512MB)", "Large (1GB)", "Extra Large (2GB)"])
        memory_layout.addWidget(cache_combo, 1, 1)
        
        memory_group.setLayout(memory_layout)
        performance_layout.addWidget(memory_group)
        
        # Threading settings
        threading_group = QGroupBox("Threading Settings")
        threading_layout = QGridLayout()
        
        threading_layout.addWidget(QLabel("Maximum Threads:"), 0, 0)
        threads_spin = QSpinBox()
        threads_spin.setRange(1, 16)
        threads_spin.setValue(4)
        threading_layout.addWidget(threads_spin, 0, 1)
        
        threading_layout.addWidget(QLabel("Analysis Priority:"), 1, 0)
        priority_combo = QComboBox()
        priority_combo.addItems(["Low", "Normal", "High", "Real-time"])
        threading_layout.addWidget(priority_combo, 1, 1)
        
        threading_group.setLayout(threading_layout)
        performance_layout.addWidget(threading_group)
        
        # GPU settings
        gpu_group = QGroupBox("GPU Acceleration")
        gpu_layout = QVBoxLayout()
        
        use_gpu_check = QCheckBox("Enable GPU Acceleration")
        use_gpu_check.setChecked(True)
        gpu_layout.addWidget(use_gpu_check)
        
        gpu_device_layout = QHBoxLayout()
        gpu_device_layout.addWidget(QLabel("GPU Device:"))
        gpu_device_combo = QComboBox()
        gpu_device_combo.addItems(["NVIDIA GeForce RTX 3080", "Intel Integrated Graphics", "AMD Radeon RX 6800"])
        gpu_device_layout.addWidget(gpu_device_combo)
        gpu_layout.addLayout(gpu_device_layout)
        
        gpu_memory_layout = QHBoxLayout()
        gpu_memory_layout.addWidget(QLabel("GPU Memory Limit:"))
        gpu_memory_spin = QSpinBox()
        gpu_memory_spin.setRange(1, 16)
        gpu_memory_spin.setValue(4)
        gpu_memory_spin.setSuffix(" GB")
        gpu_memory_layout.addWidget(gpu_memory_spin)
        gpu_layout.addLayout(gpu_memory_layout)
        
        gpu_group.setLayout(gpu_layout)
        performance_layout.addWidget(gpu_group)
        
        # 4. External Tools tab
        external_tab = QWidget()
        external_layout = QVBoxLayout(external_tab)
        
        # Path configuration
        paths_group = QGroupBox("Path Configuration")
        paths_layout = QGridLayout()
        
        tools = [
            ("Ghidra Path:", "/usr/local/ghidra"),
            ("Radare2 Path:", "/usr/bin/radare2"),
            ("Frida Path:", "/usr/local/bin/frida"),
            ("IDA Pro Path:", "C:\\Program Files\\IDA Pro")
        ]
        
        for row, (label_text, path_value) in enumerate(tools):
            paths_layout.addWidget(QLabel(label_text), row, 0)
            path_edit = QLineEdit(path_value)
            browse_btn = QPushButton("Browse")
            
            path_box = QHBoxLayout()
            path_box.addWidget(path_edit)
            path_box.addWidget(browse_btn)
            
            paths_layout.addLayout(path_box, row, 1)
        
        paths_group.setLayout(paths_layout)
        external_layout.addWidget(paths_group)
        
        # Update settings
        update_group = QGroupBox("Update Settings")
