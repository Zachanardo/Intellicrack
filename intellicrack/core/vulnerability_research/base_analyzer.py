"""
Base Analyzer Class

Common functionality for vulnerability research analyzers.
"""

import logging
import time
from typing import Any, Dict

logger = logging.getLogger(__name__)


class BaseAnalyzer:
    """Base class for vulnerability research analyzers."""
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
    
    def handle_analysis_error(self, result: Dict[str, Any], error: Exception, start_time: float) -> Dict[str, Any]:
        """
        Common error handling for analysis methods.
        
        Args:
            result: Result dictionary to update
            error: Exception that occurred
            start_time: Analysis start time
            
        Returns:
            Updated result dictionary
        """
        self.logger.error(f"Analysis failed: {error}")
        result['error'] = str(error)
        result['analysis_time'] = time.time() - start_time
        return result
    
    def create_analysis_result(self, **kwargs) -> Dict[str, Any]:
        """
        Create a standardized analysis result dictionary.
        
        Args:
            **kwargs: Additional fields to include in the result
            
        Returns:
            Standardized result dictionary
        """
        result = {
            'success': False,
            'error': None
        }
        result.update(kwargs)
        return result
    
    def finalize_analysis_result(self, result: Dict[str, Any], start_time: float, 
                               success_message: str = None, count_key: str = None) -> Dict[str, Any]:
        """
        Finalize analysis result with success status and timing.
        
        Args:
            result: Result dictionary to finalize
            start_time: Analysis start time
            success_message: Success message template (use {count} placeholder)
            count_key: Key in result containing count for message
            
        Returns:
            Finalized result dictionary
        """
        result['analysis_time'] = time.time() - start_time
        result['success'] = True
        
        if success_message and count_key and count_key in result:
            count = len(result[count_key]) if isinstance(result[count_key], (list, dict)) else result[count_key]
            self.logger.info(success_message.format(count=count))
        
        return result