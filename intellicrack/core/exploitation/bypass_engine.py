"""
Bypass Engine Module - Central engine for exploit mitigation bypasses.

Copyright (C) 2025 Zachary Flint

This file is part of Intellicrack.

Intellicrack is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Intellicrack is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Intellicrack.  If not, see <https://www.gnu.org/licenses/>.
"""

from ..shared.bypass_config import BypassConfig
from .cfi_bypass import CFIBypass


class BypassEngine:
    """Engine for exploit mitigation bypass techniques."""

    def __init__(self):
        self.cfi_bypass = CFIBypass()

    def analyze_bypass_capabilities(self, target_info):
        """Analyze available bypass capabilities for a target."""
        # Use shared configuration for consistent bypass analysis
        return BypassConfig.analyze_bypass_capabilities(target_info)

    def get_available_bypasses(self):
        """Get list of all available bypass types."""
        return BypassConfig.get_available_bypasses()

    def get_bypass_info(self, bypass_type):
        """Get detailed information about a specific bypass type."""
        return BypassConfig.get_bypass_info(bypass_type)

    def get_recommended_bypasses(self, target_info, min_reliability=6):
        """Get recommended bypasses based on target and reliability threshold."""
        return BypassConfig.get_recommended_bypasses(target_info, min_reliability)


__all__ = ['BypassEngine']