# File: ai_tools.py
# Package: intellicrack.ai
# Generated by script on: 2025-05-21T20:20:41.202398

"""Module for ai_tools functionalities."""

import logging

logger = logging.getLogger(__name__)


def retrieve_few_shot_examples(num_examples=3):
    """Retrieve few-shot examples for the AI model."""
    # These examples teach the AI model common patterns for cracking protection schemes
    examples = [
        """
Example 1: Software with License Key Validation

Binary analysis revealed a key validation routine at address 0x00401870. The function compares user input against a valid key format.

Key findings:
- Address 0x00401870: Main validation function
- At 0x00401890: Comparison result determines success/failure path
- A JNZ instruction at 0x00401895 jumps to failure path if key is invalid

Patching solution:
Address: 0x00401895 NewBytes: 909090 // Replace JNZ with NOPs to always take success path
Address: 0x00401960 NewBytes: B001C3 // Replace complex validation with "MOV AL, 1; RET" to always return success

This bypasses the key validation and forces the software to always report a successful license check.
        """,

        """
Example 2: Trial Period Expiration

Analysis shows the software checks the current date against a stored expiration date.

Key findings:
- Function at 0x00405230 retrieves current system time
- Comparison at 0x00405280 checks if current date > expiration date
- JBE instruction at 0x00405285 controls the expiration branch
- Registry value "HKCU\\Software\\MyApp\\ExpiryDate" contains expiration timestamp

Patching solution:
Address: 0x00405285 NewBytes: EB11 // Replace conditional JBE with unconditional JMP to skip expiration check
Address: 0x00405230 NewBytes: 31C0C3 // Replace time check with "XOR EAX, EAX; RET" to always return time 0

The patch causes the expiration check to always pass, effectively creating an infinite trial period.
        """,

        """
Example 3: Online Activation DRM

The software validates its license by contacting an activation server.

Key findings:
- Network calls occur in function 0x00409840
- Server response parsing at 0x00409930
- Response code verification at 0x00409980
- JNE instruction at 0x00409988 branches based on server response

Patching solution:
Address: 0x00409988 NewBytes: 9090 // Replace JNE with NOPs to always continue as if activation succeeded
Address: 0x00409930 NewBytes: C7450801000000 // Add "MOV DWORD PTR [EBP+8], 1" to force successful response code

This patch bypasses the online activation check by forcing a successful response code regardless of server communication.
        """
    ]

    # Return the requested number of examples
    return "\n".join(examples[:num_examples])
